[ { "title": "Git이 뭔가요??", "url": "/posts/git/", "categories": "Blogging", "tags": "git, github", "date": "2021-12-15 04:25:00 +0900", "snippet": "Git이 뭔지 알아보겠습니다.분산 버전관리 시스템?!Git은 local 즉 내 컴퓨터안에서 작업하고 있는 부분과 remote, 깃에 올려 둔 부분으로 구분 지을 수 있습니다.로컬에서도 로컬 리포지토리라는 곳이 있는데요 이곳에 작업하고 있던 부분을 커밋시켜 줄 수 있습니다. 커밋 시켜준 것들을 푸시를 통해 리모트 리포지토리에 올려줄 수 있습니다. 이렇게 로컬에서의 커밋과 업데이트, 그리고 리모트와 로컬사이에서의 푸시와 풀을 이용하여 작업물을 관리할 수 있습니다.명령어git init 을 통해 현재 작업하고 있는 디렉토리를 git 저장소로 지정해줍니다.작업한 파일을 스테이징 할때는 git add 라는 명령어를 사용하는데요git add --all 이라고 하면 이전 커밋부터 지금까지 작업했던 모든 파일을 올려주게 됩니다.git add [파일명] 이라고 해주면 해당 파일만 올라갑니다.어떤 파일을 작업했는지 기억이 나지 않는다면 git status라는 명령어로 확인 할 수 있습니다.git commit은 로컬 리포지토리에 올려주는 명령어 입니다.git commit -m &quot;message&quot;라고 해주면 커밋 메시지를 넣을 수 있는데요 잘 기록해두면 편리하다고 합니다.git push [리모트 저장소] [올릴 브랜치] 이 명령어로는 리모트 리포지토리에 커밋되어 있던것들을 올려줄 수 있습니다.git remote add [리모트 저장소 명칭] [리모트 저장소 주소] 이렇게 새로운 리모트 장소를 추가해줄 수 있습니다. git remote -v 로는 리모트 리포지토리들을 확인 해볼 수 있습니다.협업에 용이?!깃은 협업에 아주 용이하다고 하는데 왜그런걸까요?이는 바로 branch라는 기능 덕분입니다. branch를 활용하게 되는 경우는 이런 예시를 들 수 있겠습니다. 멀쩡하게 작동하고 있는 프로젝트의 일부분이 있다면 새로운 기능을 추가하면서 잘 작동하고 있는 부분까지 영향을 미치면 안되니 새로운 브랜치를 파서 작업하다가 나중에 완성이 되었을때 합쳐준다면 더 효율적으로 작업할 수 있습니다.여러 사람이 작업할때도 마찬가지로 각자의 브랜치를 파서 작업하다가 메인 혹은 마스터 브랜치에서 하나로 합쳐준다면 깔끔하겠죠!명령어git branch [브랜치 이름] 을 통해 새로운 브랜치를 만들 수 있습니다.git checkout [브랜치 이름]으로는 다른 브랜치로 이동할 수 있습니다.git merge [브랜치 이름]을 하게되면 현재 작업중인 브랜치를 원하는 브랜치에 병합할 수 있습니다.git branch -d [브랜치 이름] 를 통해 브랜치를 삭제하면 됩니다." }, { "title": "Google Analytics 적용하기", "url": "/posts/Google-Analytics/", "categories": "Blogging", "tags": "Google Analytics", "date": "2021-12-15 01:14:00 +0900", "snippet": "이번 블로그는 Google Analytics를 적용해본 과정에 대해 적어보겠습니다!시작하기Google Analytics 에 들어가서 계정을 만들어 줍니다.측정 ID받아오기가입 후에 웹사이트 왼쪽 하단에 세팅을 들어갑니다.세팅 &amp;gt; 관리자 &amp;gt; 속성 &amp;gt; 데이터 스트림 에 들어가서 스트림 추가를 클릭하여 웹사이트의 URL을 넣어줍니다!넣어주고 나면 측정 ID와 html 코드가 생성됩니다.블로그에 적용하기 _config.yml 파일에서google_analytics: id: &#39;G-V6XXXXXXX&#39; # fill in your Google Analytics ID # Google Analytics pageviews report settings pv: proxy_endpoint: # fill in the Google Analytics superProxy endpoint of Google App Engine cache_path: # the local PV cache data, friendly to visitors from GFW regionid 부분에 위에서 생성한 ‘G-XXXXXXXX’ 형식으로 생긴 측정 ID를 넣어줍니다. _includes 폴더에 들어가면 google-analytics.html 라는 파일이 있습니다.이 파일에서는 이미 위에서 생성된 html 코드가 id 부분만 G-4QCCGQ1EPG 이렇게 바뀌어서 들어있긴 하지만 변경없이 실행했더니 되지 않아서 다시 복붙을 해줬습니다.google analytics 웹사이트에서 복사해둔 html코드를 해당 파일에 붙여넣습니다.복붙을 해오면 아이디가 들어가 있는데 나중에 혹시 모를 상황을 위해 id를 넣어주는 부분에만 G-4QCCGQ1EPG 이렇게 변경해주었습니다.&amp;lt;!-- Global site tag (gtag.js) - Google Analytics --&amp;gt;&amp;lt;script async src=&quot;https://www.googletagmanager.com/gtag/js?id= ID 넣어준는 부분 &quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt; window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag(&#39;js&#39;, new Date()); gtag(&#39;config&#39;, &#39; ID 넣어준는 부분 &#39;);&amp;lt;/script&amp;gt;적용된 것 확인하기 블로그에 들어가서 새로고침을 해줍니다. Google Analytics 사이트 왼쪽 네비게이션 바에서 보고서 &amp;gt; 실시간 에 들어가면 사용자 수가 변경되어있다면 성공입니다!!" }, { "title": "Jekyll 블로그 시작하기!", "url": "/posts/Jekyll-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0!/", "categories": "Blogging", "tags": "시작", "date": "2021-11-29 20:55:00 +0900", "snippet": "준비하기Jekyll Docs 를 참고하여 Ruby, RubyGems, Jekyll, 그리고 Bundler를 설치 해 주었습니다.시작하기jekyll new . --force라는 명령어를 입력하여 제가 작업하고 있던 디렉토리에 Jekyll을 설치했습니다.bundle exec jekyll serve 로 Jekyll serve 실행 후 웹에서 localhost:4000에 접속해서 제가 만든 기본 테마로 된 Jekyll 사이트가 만들어진 것을 확인했습니다.테마 변경하기마음에 드는 테마를 고르고 골라 jekyll-theme-chirpy 라는 테마로 하기로 결정하고 로컬로 git clone 을 했습니다.의존성을 감안하여 _posts를 제외하고 테마를 덮어씌우라고 배웠지만 저는 _posts에 내용을 따로 저장해두었기 때문에 모든 폴더를 덮어씌웠습니다.직후 bundle exec jekyll serve 를 했더니 ‘Could not find gem ‘html-proofer (~&amp;gt; 3.18)’ in locally installed gems.Run ‘bundle install’ to install missing gems.’ 이런 에러가 발생해서 bundle 이라는 명령어로 dependencies를 설치해 주었습니다.테마가 잘 적용된 것을 확인하고 _config.yml 부터 하나씩 내용을 변경했습니다.생각보다 순조로운 테마 변경하기였습니다.favicon 및 메인 이미지 변경하기faviconReal Favicon Generator에 들어가서 원하는 이미지를 넣고 favicon에 맞는 사이즈들로 zip파일을 다운받았습니다.압축을 풀고 browserconfig.xml site.webmanifest위 두개의 파일을 삭제 한 후 나머지 png, ico 파일들을 assets/img/favicons/ 경로로 이동시켜주었습니다.메인 이미지_config.yml에서 옵션들 중 img_cdn과 avatar이라는 옵션을 변경해 주었습니다. img_cdn 은 ‘https://hacho08.github.io’ 로 avatar는 /assets/img/meIcon.png 이미지 파일 경로를 넣어주었습니다. 로컬에서 볼 때는 이미지가 아직 리모트에 올라가지 않아서 보이지 않았지만 한번 푸시 해주고 난 후로는 잘 보였습니다.GitPages에 올리기Git에 푸시를 했는데 ‘GitHub Pages failed to build your site.’ 라는 에러가 뜨고 블로그에 반영이 되지 않았습니다 ㅠㅠ 한참을 해매다가 해당 테마의 readme를 다시 천천히 읽으며 따라 해 보았습니다.보안상의 이유로 Github Pages가 safe 모드로 빌드를 하기 때문에 플러그인 사용을 하는 것을 막아서 그렇다고 하는데요 이를 해결하기 위해 GitHub Actions 을 사용해 사이트를 빌드해주면 된다고 합니다. 이렇게 할 경우 새로운 브랜치를 만들어서 Github Pages의 source로 사용한다고 해요. ‘_config.yml’의 ‘url’은 ‘https://hacho08.github.io’ 이렇게 바꿔주고 ‘baseurl’은 그냥 ‘ ‘로 놔둡니다. (저는 ‘/repository name’으로 해놨다가 한참 뒤에 잘못 된걸 알고 바꿔줬어요 ㅠㅠ 프로젝트가 별개로 있을때만 ‘/프로젝트명’ 을 해주는 것 같아요) .github/workflows/pages-deploy.yml , tools/deploy.sh 해당 위치에 두 파일이 잘 있는지 확인했습니다. 저의 경우 .github라는 폴더는 없었기 때문에 폴더들과 파일을 만들어 주었습니다. Gemfile.lock도 올려주었기 때문에 linux를 사용하지 않으면 bundle lock --add-platform x86_64-linux 이것도 해줘야했습니다. 이렇게 해주고 난 후 푸시를 했더니 새로운 gh-pages라는 브랜치가 생겼습니다.마지막으로 Github에 들어가서 Setting 탭에 들어간 후 Pages를 왼쪽 네브바에서 선택해서 들어가면 Source라는 부분이 보이는데요 여기서 branch를 master가 아닌 gh-pages로 변경해주고 저장을 해주었습니다.이렇게만 하면 될 줄 알았더니..분명 로컬에서는 페이지가 멀쩡히 나왔었는데 블로그 UI가 다 깨져있는게 아니겠어요…이유를 찾고 찾던 중에 baseurl 을 확인해보라는 글을 보게 되었고 위에서 언급했던 baseurl을 그냥 빈칸으로 놔두고 다시 푸시를 했더니 해결 되었습니다!Lesson LearnedGithub의 readme를 꼼꼼히 읽자!!!" } ]
